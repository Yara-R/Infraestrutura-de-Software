Algoritmo de Banker

O exercício consiste na implementação do algoritmo de Banker apresentado na página P-45 do
livro Operating System Concepts, Silberschatz, A. et al, 10a edição. Contudo, seguem algumas
modificações:

- O NUMBER_OF_CUSTOMERS e o NUMBER_OF_RESOURCES não são fixos, e serão determinados de
acordo com a entrada do programa, a ser melhor descrita a seguir;

- O programa deve ser implementado em C e ser executável em sistemas Linux, Unix ou macOS,
com a compilação feita por Makefile, através simplesmente do comando make via terminal,
retornando o arquivo com nome banker executável;

- Cada argumento por linha de comando na chamada do programa representa o número de
instância para cada tipo de recursos. Por exemplo, para atribuir três recursos com número de
instâncias iguais a 10, 5 e 7 respectivamente, a chamada deve ser:

./banker 10 5 7

- O arquivo contendo os clientes será denominado por customer.txt, com mesmo formato
daquele apresentado no livro. Contudo há uma pequena diferença: o número de linhas irá
indicar a quantidade de clientes. O exemplo a seguir temos 5 clientes:

7,5,3
3,2,2
9,0,2
2,2,2
4,3,3

- No lugar do programa permitir comandos do usuário, um outro arquivo deve ser lido,
commands.txt, que conterá uma sequência de comandos RQ, RL e *, com a mesma
formatação daquela apresentada no livro. A seguir, um exemplo do arquivo:

RQ 0 0 2 1
RQ 2 3 0 2
RQ 1 2 0 3
RQ 1 2 0 0
RQ 4 0 0 2
RL 0 0 1 1
RQ 3 2 1 1
*
RQ 4 4 0 0
RL 0 0 1 1
RQ 1 1 0 2
RQ 0 0 2 0
RQ 2 0 1 0

- Como saída, o programa deverá produzir o arquivo result.txt. Para as entradas acima
apresentadas, seguem as informações da saída:

Allocate to customer 0 the resources 0 2 1
Allocate to customer 2 the resources 3 0 2
The customer 1 request 2 0 3 was denied because exceed its maximum need
Allocate to customer 1 the resources 2 0 0
Allocate to customer 4 the resources 0 0 2
Release from customer 0 the resources 0 1 1
Allocate to customer 3 the resources 2 1 1
MAXIMUM | ALLOCATION | NEED
7 5 3 | 0 1 0 | 7 4 3
3 2 2 | 2 0 0 | 1 2 2
9 0 2 | 3 0 2 | 6 0 0
2 2 2 | 2 1 1 | 0 1 1
4 3 3 | 0 0 2 | 4 3 1
AVAILABLE 3 3 2
The resources 3 3 2 are not enough to customer 4 request 4 0 0
The customer 0 released 0 1 1 was denied because exceed its maximum
allocation
Allocate to customer 1 the resources 1 0 2
The customer 0 request 0 2 0 was denied because result in an unsafe state
The customer 2 request 0 1 0 was denied because exceed its maximum need

- A verificação do comando RQ deverá ter a seguinte ordem: (1) se o customer tem permissão
para alocar os recursos; (2) se há recursos suficientes no sistema para a requisição; (3) se a
requisição garante um estado seguro

- O programa deve apresentar mensagem para cada um dos erros descritos abaixo, seguindo a
ordem de precedência estabelecida, ou seja, se o erro (1) e (3) ocorrerem, apenas a
mensagem de erro do tipo (1) deve ser apresentada. Após a mensagem de erro, o programa
deve encerrar e o result.txt arquivo não deve ser criado

(1) se commands.txt não existir, não puder ser aberto ou encontrar-se numa formatação
diferente daquela indicada nesse documento, a mensagem a ser apresentada é:

Fail to read commands.txt

Exemplo

./banker 10 5 7

Fail to read commands.txt

(2) se customer.txt não existir, não puder ser aberto ou encontrar-se numa formatação
diferente daquela indicada nesse documento, a mensagem a ser apresentada é:

Fail to read customer.txt

Exemplo

./banker 10 5 7

Fail to read customer.txt

(3) se o número de argumento da linha de comando não estiver de acordo com a quantidade de
recursos indicados nos arquivos customer.txt , a mensagem a ser apresentada é:

Incompatibility between customer.txt and command line

Exemplo

./banker 10 5 7

Incompatibility between customer.txt and command line

(4) se o número de argumento da linha de comando não estiver de acordo com a quantidade de
recursos indicados nos arquivos commands.txt, a mensagem a ser apresentada é:

Incompatibility between commands.txt and command line

Exemplo

./banker 10 5 7

Incompatibility between commands.txt and command line

- Para validação da implementação, será utilizado o compilador gcc 13.2.0, com o arquivo de
saída e a as mensagens de erro seguindo rigorosamente a formatação e texto apresentados
